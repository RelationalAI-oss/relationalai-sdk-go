/*
 * Delve Client SDK
 *
 * This is a Client SDK for Delve API
 *
 * API version: 1.1.3
 * Contact: support@relational.ai
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// SetOptionsActionAllOf struct for SetOptionsActionAllOf
type SetOptionsActionAllOf struct {
	AbortOnError NullableBool `json:"abort_on_error,omitempty"`
	Debug NullableBool `json:"debug,omitempty"`
	DebugTrace NullableBool `json:"debug_trace,omitempty"`
	Silent NullableBool `json:"silent,omitempty"`
}

// NewSetOptionsActionAllOf instantiates a new SetOptionsActionAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetOptionsActionAllOf() *SetOptionsActionAllOf {
	this := SetOptionsActionAllOf{}
	return &this
}

// NewSetOptionsActionAllOfWithDefaults instantiates a new SetOptionsActionAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetOptionsActionAllOfWithDefaults() *SetOptionsActionAllOf {
	this := SetOptionsActionAllOf{}
	return &this
}

// GetAbortOnError returns the AbortOnError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SetOptionsActionAllOf) GetAbortOnError() bool {
	if o == nil || o.AbortOnError.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AbortOnError.Get()
}

// GetAbortOnErrorOk returns a tuple with the AbortOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SetOptionsActionAllOf) GetAbortOnErrorOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AbortOnError.Get(), o.AbortOnError.IsSet()
}

// HasAbortOnError returns a boolean if a field has been set.
func (o *SetOptionsActionAllOf) HasAbortOnError() bool {
	if o != nil && o.AbortOnError.IsSet() {
		return true
	}

	return false
}

// SetAbortOnError gets a reference to the given NullableBool and assigns it to the AbortOnError field.
func (o *SetOptionsActionAllOf) SetAbortOnError(v bool) {
	o.AbortOnError.Set(&v)
}
// SetAbortOnErrorNil sets the value for AbortOnError to be an explicit nil
func (o *SetOptionsActionAllOf) SetAbortOnErrorNil() {
	o.AbortOnError.Set(nil)
}

// UnsetAbortOnError ensures that no value is present for AbortOnError, not even an explicit nil
func (o *SetOptionsActionAllOf) UnsetAbortOnError() {
	o.AbortOnError.Unset()
}

// GetDebug returns the Debug field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SetOptionsActionAllOf) GetDebug() bool {
	if o == nil || o.Debug.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Debug.Get()
}

// GetDebugOk returns a tuple with the Debug field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SetOptionsActionAllOf) GetDebugOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Debug.Get(), o.Debug.IsSet()
}

// HasDebug returns a boolean if a field has been set.
func (o *SetOptionsActionAllOf) HasDebug() bool {
	if o != nil && o.Debug.IsSet() {
		return true
	}

	return false
}

// SetDebug gets a reference to the given NullableBool and assigns it to the Debug field.
func (o *SetOptionsActionAllOf) SetDebug(v bool) {
	o.Debug.Set(&v)
}
// SetDebugNil sets the value for Debug to be an explicit nil
func (o *SetOptionsActionAllOf) SetDebugNil() {
	o.Debug.Set(nil)
}

// UnsetDebug ensures that no value is present for Debug, not even an explicit nil
func (o *SetOptionsActionAllOf) UnsetDebug() {
	o.Debug.Unset()
}

// GetDebugTrace returns the DebugTrace field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SetOptionsActionAllOf) GetDebugTrace() bool {
	if o == nil || o.DebugTrace.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DebugTrace.Get()
}

// GetDebugTraceOk returns a tuple with the DebugTrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SetOptionsActionAllOf) GetDebugTraceOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DebugTrace.Get(), o.DebugTrace.IsSet()
}

// HasDebugTrace returns a boolean if a field has been set.
func (o *SetOptionsActionAllOf) HasDebugTrace() bool {
	if o != nil && o.DebugTrace.IsSet() {
		return true
	}

	return false
}

// SetDebugTrace gets a reference to the given NullableBool and assigns it to the DebugTrace field.
func (o *SetOptionsActionAllOf) SetDebugTrace(v bool) {
	o.DebugTrace.Set(&v)
}
// SetDebugTraceNil sets the value for DebugTrace to be an explicit nil
func (o *SetOptionsActionAllOf) SetDebugTraceNil() {
	o.DebugTrace.Set(nil)
}

// UnsetDebugTrace ensures that no value is present for DebugTrace, not even an explicit nil
func (o *SetOptionsActionAllOf) UnsetDebugTrace() {
	o.DebugTrace.Unset()
}

// GetSilent returns the Silent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SetOptionsActionAllOf) GetSilent() bool {
	if o == nil || o.Silent.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Silent.Get()
}

// GetSilentOk returns a tuple with the Silent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SetOptionsActionAllOf) GetSilentOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Silent.Get(), o.Silent.IsSet()
}

// HasSilent returns a boolean if a field has been set.
func (o *SetOptionsActionAllOf) HasSilent() bool {
	if o != nil && o.Silent.IsSet() {
		return true
	}

	return false
}

// SetSilent gets a reference to the given NullableBool and assigns it to the Silent field.
func (o *SetOptionsActionAllOf) SetSilent(v bool) {
	o.Silent.Set(&v)
}
// SetSilentNil sets the value for Silent to be an explicit nil
func (o *SetOptionsActionAllOf) SetSilentNil() {
	o.Silent.Set(nil)
}

// UnsetSilent ensures that no value is present for Silent, not even an explicit nil
func (o *SetOptionsActionAllOf) UnsetSilent() {
	o.Silent.Unset()
}

func (o SetOptionsActionAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AbortOnError.IsSet() {
		toSerialize["abort_on_error"] = o.AbortOnError.Get()
	}
	if o.Debug.IsSet() {
		toSerialize["debug"] = o.Debug.Get()
	}
	if o.DebugTrace.IsSet() {
		toSerialize["debug_trace"] = o.DebugTrace.Get()
	}
	if o.Silent.IsSet() {
		toSerialize["silent"] = o.Silent.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSetOptionsActionAllOf struct {
	value *SetOptionsActionAllOf
	isSet bool
}

func (v NullableSetOptionsActionAllOf) Get() *SetOptionsActionAllOf {
	return v.value
}

func (v *NullableSetOptionsActionAllOf) Set(val *SetOptionsActionAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSetOptionsActionAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSetOptionsActionAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetOptionsActionAllOf(val *SetOptionsActionAllOf) *NullableSetOptionsActionAllOf {
	return &NullableSetOptionsActionAllOf{value: val, isSet: true}
}

func (v NullableSetOptionsActionAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetOptionsActionAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


