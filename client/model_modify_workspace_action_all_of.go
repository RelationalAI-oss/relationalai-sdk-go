/*
 * RelationalAI SDK
 *
 * This is a Client SDK for RelationalAI
 *
 * API version: 1.1.3
 * Contact: support@relational.ai
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ModifyWorkspaceActionAllOf struct for ModifyWorkspaceActionAllOf
type ModifyWorkspaceActionAllOf struct {
	DeleteEdb NullableString `json:"delete_edb,omitempty"`
	DeleteSource []string `json:"delete_source,omitempty"`
	EnableLibrary NullableString `json:"enable_library,omitempty"`
}

// NewModifyWorkspaceActionAllOf instantiates a new ModifyWorkspaceActionAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModifyWorkspaceActionAllOf() *ModifyWorkspaceActionAllOf {
	this := ModifyWorkspaceActionAllOf{}
	return &this
}

// NewModifyWorkspaceActionAllOfWithDefaults instantiates a new ModifyWorkspaceActionAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModifyWorkspaceActionAllOfWithDefaults() *ModifyWorkspaceActionAllOf {
	this := ModifyWorkspaceActionAllOf{}
	return &this
}

// GetDeleteEdb returns the DeleteEdb field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModifyWorkspaceActionAllOf) GetDeleteEdb() string {
	if o == nil || o.DeleteEdb.Get() == nil {
		var ret string
		return ret
	}
	return *o.DeleteEdb.Get()
}

// GetDeleteEdbOk returns a tuple with the DeleteEdb field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModifyWorkspaceActionAllOf) GetDeleteEdbOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DeleteEdb.Get(), o.DeleteEdb.IsSet()
}

// HasDeleteEdb returns a boolean if a field has been set.
func (o *ModifyWorkspaceActionAllOf) HasDeleteEdb() bool {
	if o != nil && o.DeleteEdb.IsSet() {
		return true
	}

	return false
}

// SetDeleteEdb gets a reference to the given NullableString and assigns it to the DeleteEdb field.
func (o *ModifyWorkspaceActionAllOf) SetDeleteEdb(v string) {
	o.DeleteEdb.Set(&v)
}
// SetDeleteEdbNil sets the value for DeleteEdb to be an explicit nil
func (o *ModifyWorkspaceActionAllOf) SetDeleteEdbNil() {
	o.DeleteEdb.Set(nil)
}

// UnsetDeleteEdb ensures that no value is present for DeleteEdb, not even an explicit nil
func (o *ModifyWorkspaceActionAllOf) UnsetDeleteEdb() {
	o.DeleteEdb.Unset()
}

// GetDeleteSource returns the DeleteSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModifyWorkspaceActionAllOf) GetDeleteSource() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.DeleteSource
}

// GetDeleteSourceOk returns a tuple with the DeleteSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModifyWorkspaceActionAllOf) GetDeleteSourceOk() (*[]string, bool) {
	if o == nil || o.DeleteSource == nil {
		return nil, false
	}
	return &o.DeleteSource, true
}

// HasDeleteSource returns a boolean if a field has been set.
func (o *ModifyWorkspaceActionAllOf) HasDeleteSource() bool {
	if o != nil && o.DeleteSource != nil {
		return true
	}

	return false
}

// SetDeleteSource gets a reference to the given []string and assigns it to the DeleteSource field.
func (o *ModifyWorkspaceActionAllOf) SetDeleteSource(v []string) {
	o.DeleteSource = v
}

// GetEnableLibrary returns the EnableLibrary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModifyWorkspaceActionAllOf) GetEnableLibrary() string {
	if o == nil || o.EnableLibrary.Get() == nil {
		var ret string
		return ret
	}
	return *o.EnableLibrary.Get()
}

// GetEnableLibraryOk returns a tuple with the EnableLibrary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModifyWorkspaceActionAllOf) GetEnableLibraryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableLibrary.Get(), o.EnableLibrary.IsSet()
}

// HasEnableLibrary returns a boolean if a field has been set.
func (o *ModifyWorkspaceActionAllOf) HasEnableLibrary() bool {
	if o != nil && o.EnableLibrary.IsSet() {
		return true
	}

	return false
}

// SetEnableLibrary gets a reference to the given NullableString and assigns it to the EnableLibrary field.
func (o *ModifyWorkspaceActionAllOf) SetEnableLibrary(v string) {
	o.EnableLibrary.Set(&v)
}
// SetEnableLibraryNil sets the value for EnableLibrary to be an explicit nil
func (o *ModifyWorkspaceActionAllOf) SetEnableLibraryNil() {
	o.EnableLibrary.Set(nil)
}

// UnsetEnableLibrary ensures that no value is present for EnableLibrary, not even an explicit nil
func (o *ModifyWorkspaceActionAllOf) UnsetEnableLibrary() {
	o.EnableLibrary.Unset()
}

func (o ModifyWorkspaceActionAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeleteEdb.IsSet() {
		toSerialize["delete_edb"] = o.DeleteEdb.Get()
	}
	if o.DeleteSource != nil {
		toSerialize["delete_source"] = o.DeleteSource
	}
	if o.EnableLibrary.IsSet() {
		toSerialize["enable_library"] = o.EnableLibrary.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableModifyWorkspaceActionAllOf struct {
	value *ModifyWorkspaceActionAllOf
	isSet bool
}

func (v NullableModifyWorkspaceActionAllOf) Get() *ModifyWorkspaceActionAllOf {
	return v.value
}

func (v *NullableModifyWorkspaceActionAllOf) Set(val *ModifyWorkspaceActionAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableModifyWorkspaceActionAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableModifyWorkspaceActionAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModifyWorkspaceActionAllOf(val *ModifyWorkspaceActionAllOf) *NullableModifyWorkspaceActionAllOf {
	return &NullableModifyWorkspaceActionAllOf{value: val, isSet: true}
}

func (v NullableModifyWorkspaceActionAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModifyWorkspaceActionAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


