/*
 * Delve Client SDK
 *
 * This is a Client SDK for Delve API
 *
 * API version: 1.1.3
 * Contact: support@relational.ai
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// QueryAction struct for QueryAction
type QueryAction struct {
	Action
	Inputs []Relation `json:"inputs,omitempty"`
	Outputs []string `json:"outputs,omitempty"`
	Persist []string `json:"persist,omitempty"`
	Source Source `json:"source"`
}

// NewQueryAction instantiates a new QueryAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryAction(source Source, ) *QueryAction {
	this := QueryAction{}
	this.Source = source
	return &this
}

// NewQueryActionWithDefaults instantiates a new QueryAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryActionWithDefaults() *QueryAction {
	this := QueryAction{}
	return &this
}

// GetInputs returns the Inputs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryAction) GetInputs() []Relation {
	if o == nil  {
		var ret []Relation
		return ret
	}
	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryAction) GetInputsOk() (*[]Relation, bool) {
	if o == nil || o.Inputs == nil {
		return nil, false
	}
	return &o.Inputs, true
}

// HasInputs returns a boolean if a field has been set.
func (o *QueryAction) HasInputs() bool {
	if o != nil && o.Inputs != nil {
		return true
	}

	return false
}

// SetInputs gets a reference to the given []Relation and assigns it to the Inputs field.
func (o *QueryAction) SetInputs(v []Relation) {
	o.Inputs = v
}

// GetOutputs returns the Outputs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryAction) GetOutputs() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Outputs
}

// GetOutputsOk returns a tuple with the Outputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryAction) GetOutputsOk() (*[]string, bool) {
	if o == nil || o.Outputs == nil {
		return nil, false
	}
	return &o.Outputs, true
}

// HasOutputs returns a boolean if a field has been set.
func (o *QueryAction) HasOutputs() bool {
	if o != nil && o.Outputs != nil {
		return true
	}

	return false
}

// SetOutputs gets a reference to the given []string and assigns it to the Outputs field.
func (o *QueryAction) SetOutputs(v []string) {
	o.Outputs = v
}

// GetPersist returns the Persist field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryAction) GetPersist() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Persist
}

// GetPersistOk returns a tuple with the Persist field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryAction) GetPersistOk() (*[]string, bool) {
	if o == nil || o.Persist == nil {
		return nil, false
	}
	return &o.Persist, true
}

// HasPersist returns a boolean if a field has been set.
func (o *QueryAction) HasPersist() bool {
	if o != nil && o.Persist != nil {
		return true
	}

	return false
}

// SetPersist gets a reference to the given []string and assigns it to the Persist field.
func (o *QueryAction) SetPersist(v []string) {
	o.Persist = v
}

// GetSource returns the Source field value
func (o *QueryAction) GetSource() Source {
	if o == nil  {
		var ret Source
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *QueryAction) GetSourceOk() (*Source, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *QueryAction) SetSource(v Source) {
	o.Source = v
}

func (o QueryAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedAction, errAction := json.Marshal(o.Action)
	if errAction != nil {
		return []byte{}, errAction
	}
	errAction = json.Unmarshal([]byte(serializedAction), &toSerialize)
	if errAction != nil {
		return []byte{}, errAction
	}
	if o.Inputs != nil {
		toSerialize["inputs"] = o.Inputs
	}
	if o.Outputs != nil {
		toSerialize["outputs"] = o.Outputs
	}
	if o.Persist != nil {
		toSerialize["persist"] = o.Persist
	}
	if true {
		toSerialize["source"] = o.Source
	}
	return json.Marshal(toSerialize)
}

type NullableQueryAction struct {
	value *QueryAction
	isSet bool
}

func (v NullableQueryAction) Get() *QueryAction {
	return v.value
}

func (v *NullableQueryAction) Set(val *QueryAction) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryAction) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryAction(val *QueryAction) *NullableQueryAction {
	return &NullableQueryAction{value: val, isSet: true}
}

func (v NullableQueryAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


