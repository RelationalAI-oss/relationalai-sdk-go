/*
 * RelationalAI SDK
 *
 * This is a Client SDK for RelationalAI
 *
 * API version: 1.2.0
 * Contact: support@relational.ai
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ActionResult struct for ActionResult
type ActionResult struct {
	Type string `json:"type"`
}

// NewActionResult instantiates a new ActionResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionResult(type_ string, ) *ActionResult {
	this := ActionResult{}
	this.Type = type_
	return &this
}

// NewActionResultWithDefaults instantiates a new ActionResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionResultWithDefaults() *ActionResult {
	this := ActionResult{}
	var type_ string = ""
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *ActionResult) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ActionResult) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ActionResult) SetType(v string) {
	o.Type = v
}

func (o ActionResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableActionResult struct {
	value *ActionResult
	isSet bool
}

func (v NullableActionResult) Get() *ActionResult {
	return v.value
}

func (v *NullableActionResult) Set(val *ActionResult) {
	v.value = val
	v.isSet = true
}

func (v NullableActionResult) IsSet() bool {
	return v.isSet
}

func (v *NullableActionResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionResult(val *ActionResult) *NullableActionResult {
	return &NullableActionResult{value: val, isSet: true}
}

func (v NullableActionResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


