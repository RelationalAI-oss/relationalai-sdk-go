/*
 * Delve Client SDK
 *
 * This is a Client SDK for Delve API
 *
 * API version: 1.1.3
 * Contact: support@relational.ai
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// CSVFileSchema struct for CSVFileSchema
type CSVFileSchema struct {
	FileSchema
	Types []string `json:"types,omitempty"`
}

// NewCSVFileSchema instantiates a new CSVFileSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCSVFileSchema() *CSVFileSchema {
	this := CSVFileSchema{}
	return &this
}

// NewCSVFileSchemaWithDefaults instantiates a new CSVFileSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCSVFileSchemaWithDefaults() *CSVFileSchema {
	this := CSVFileSchema{}
	return &this
}

// GetTypes returns the Types field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CSVFileSchema) GetTypes() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Types
}

// GetTypesOk returns a tuple with the Types field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CSVFileSchema) GetTypesOk() (*[]string, bool) {
	if o == nil || o.Types == nil {
		return nil, false
	}
	return &o.Types, true
}

// HasTypes returns a boolean if a field has been set.
func (o *CSVFileSchema) HasTypes() bool {
	if o != nil && o.Types != nil {
		return true
	}

	return false
}

// SetTypes gets a reference to the given []string and assigns it to the Types field.
func (o *CSVFileSchema) SetTypes(v []string) {
	o.Types = v
}

func (o CSVFileSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedFileSchema, errFileSchema := json.Marshal(o.FileSchema)
	if errFileSchema != nil {
		return []byte{}, errFileSchema
	}
	errFileSchema = json.Unmarshal([]byte(serializedFileSchema), &toSerialize)
	if errFileSchema != nil {
		return []byte{}, errFileSchema
	}
	if o.Types != nil {
		toSerialize["types"] = o.Types
	}
	return json.Marshal(toSerialize)
}

type NullableCSVFileSchema struct {
	value *CSVFileSchema
	isSet bool
}

func (v NullableCSVFileSchema) Get() *CSVFileSchema {
	return v.value
}

func (v *NullableCSVFileSchema) Set(val *CSVFileSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableCSVFileSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableCSVFileSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSVFileSchema(val *CSVFileSchema) *NullableCSVFileSchema {
	return &NullableCSVFileSchema{value: val, isSet: true}
}

func (v NullableCSVFileSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSVFileSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


