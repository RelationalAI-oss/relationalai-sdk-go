/*
 * RelationalAI SDK
 *
 * This is a Client SDK for RelationalAI
 *
 * API version: 1.2.0
 * Contact: support@relational.ai
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// AbstractProblem struct for AbstractProblem
type AbstractProblem struct {
	Type string `json:"type"`
}

// NewAbstractProblem instantiates a new AbstractProblem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbstractProblem(type_ string, ) *AbstractProblem {
	this := AbstractProblem{}
	this.Type = type_
	return &this
}

// NewAbstractProblemWithDefaults instantiates a new AbstractProblem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbstractProblemWithDefaults() *AbstractProblem {
	this := AbstractProblem{}
	var type_ string = ""
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *AbstractProblem) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AbstractProblem) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AbstractProblem) SetType(v string) {
	o.Type = v
}

func (o AbstractProblem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableAbstractProblem struct {
	value *AbstractProblem
	isSet bool
}

func (v NullableAbstractProblem) Get() *AbstractProblem {
	return v.value
}

func (v *NullableAbstractProblem) Set(val *AbstractProblem) {
	v.value = val
	v.isSet = true
}

func (v NullableAbstractProblem) IsSet() bool {
	return v.isSet
}

func (v *NullableAbstractProblem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbstractProblem(val *AbstractProblem) *NullableAbstractProblem {
	return &NullableAbstractProblem{value: val, isSet: true}
}

func (v NullableAbstractProblem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbstractProblem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


