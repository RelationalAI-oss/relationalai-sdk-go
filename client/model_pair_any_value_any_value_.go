/*
 * RelationalAI SDK
 *
 * This is a Client SDK for RelationalAI
 *
 * API version: 1.1.3
 * Contact: support@relational.ai
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// PairAnyValueAnyValue struct for PairAnyValueAnyValue
type PairAnyValueAnyValue struct {
	First interface{} `json:"first,omitempty"`
	Second interface{} `json:"second,omitempty"`
	Type string `json:"type"`
}

// NewPairAnyValueAnyValue instantiates a new PairAnyValueAnyValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPairAnyValueAnyValue(type_ string, ) *PairAnyValueAnyValue {
	this := PairAnyValueAnyValue{}
	this.Type = type_
	return &this
}

// NewPairAnyValueAnyValueWithDefaults instantiates a new PairAnyValueAnyValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPairAnyValueAnyValueWithDefaults() *PairAnyValueAnyValue {
	this := PairAnyValueAnyValue{}
	var type_ string = "Pair_AnyValue_AnyValue_"
	this.Type = type_
	return &this
}

// GetFirst returns the First field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PairAnyValueAnyValue) GetFirst() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.First
}

// GetFirstOk returns a tuple with the First field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PairAnyValueAnyValue) GetFirstOk() (*interface{}, bool) {
	if o == nil || o.First == nil {
		return nil, false
	}
	return &o.First, true
}

// HasFirst returns a boolean if a field has been set.
func (o *PairAnyValueAnyValue) HasFirst() bool {
	if o != nil && o.First != nil {
		return true
	}

	return false
}

// SetFirst gets a reference to the given interface{} and assigns it to the First field.
func (o *PairAnyValueAnyValue) SetFirst(v interface{}) {
	o.First = v
}

// GetSecond returns the Second field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PairAnyValueAnyValue) GetSecond() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.Second
}

// GetSecondOk returns a tuple with the Second field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PairAnyValueAnyValue) GetSecondOk() (*interface{}, bool) {
	if o == nil || o.Second == nil {
		return nil, false
	}
	return &o.Second, true
}

// HasSecond returns a boolean if a field has been set.
func (o *PairAnyValueAnyValue) HasSecond() bool {
	if o != nil && o.Second != nil {
		return true
	}

	return false
}

// SetSecond gets a reference to the given interface{} and assigns it to the Second field.
func (o *PairAnyValueAnyValue) SetSecond(v interface{}) {
	o.Second = v
}

// GetType returns the Type field value
func (o *PairAnyValueAnyValue) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PairAnyValueAnyValue) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PairAnyValueAnyValue) SetType(v string) {
	o.Type = v
}

func (o PairAnyValueAnyValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.First != nil {
		toSerialize["first"] = o.First
	}
	if o.Second != nil {
		toSerialize["second"] = o.Second
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullablePairAnyValueAnyValue struct {
	value *PairAnyValueAnyValue
	isSet bool
}

func (v NullablePairAnyValueAnyValue) Get() *PairAnyValueAnyValue {
	return v.value
}

func (v *NullablePairAnyValueAnyValue) Set(val *PairAnyValueAnyValue) {
	v.value = val
	v.isSet = true
}

func (v NullablePairAnyValueAnyValue) IsSet() bool {
	return v.isSet
}

func (v *NullablePairAnyValueAnyValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePairAnyValueAnyValue(val *PairAnyValueAnyValue) *NullablePairAnyValueAnyValue {
	return &NullablePairAnyValueAnyValue{value: val, isSet: true}
}

func (v NullablePairAnyValueAnyValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePairAnyValueAnyValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


