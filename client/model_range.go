/*
 * RelationalAI SDK
 *
 * This is a Client SDK for RelationalAI
 *
 * API version: 1.1.3
 * Contact: support@relational.ai
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// Range struct for Range
type Range struct {
	Area Area `json:"area"`
	EndByte int32 `json:"end_byte"`
	Input interface{} `json:"input,omitempty"`
	StartByte int32 `json:"start_byte"`
	Type string `json:"type"`
}

// NewRange instantiates a new Range object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRange(area Area, endByte int32, startByte int32, type_ string, ) *Range {
	this := Range{}
	this.Area = area
	this.EndByte = endByte
	this.StartByte = startByte
	this.Type = type_
	return &this
}

// NewRangeWithDefaults instantiates a new Range object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRangeWithDefaults() *Range {
	this := Range{}
	var endByte int32 = 0
	this.EndByte = endByte
	var startByte int32 = 0
	this.StartByte = startByte
	var type_ string = "Range"
	this.Type = type_
	return &this
}

// GetArea returns the Area field value
func (o *Range) GetArea() Area {
	if o == nil  {
		var ret Area
		return ret
	}

	return o.Area
}

// GetAreaOk returns a tuple with the Area field value
// and a boolean to check if the value has been set.
func (o *Range) GetAreaOk() (*Area, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Area, true
}

// SetArea sets field value
func (o *Range) SetArea(v Area) {
	o.Area = v
}

// GetEndByte returns the EndByte field value
func (o *Range) GetEndByte() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.EndByte
}

// GetEndByteOk returns a tuple with the EndByte field value
// and a boolean to check if the value has been set.
func (o *Range) GetEndByteOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EndByte, true
}

// SetEndByte sets field value
func (o *Range) SetEndByte(v int32) {
	o.EndByte = v
}

// GetInput returns the Input field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Range) GetInput() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Range) GetInputOk() (*interface{}, bool) {
	if o == nil || o.Input == nil {
		return nil, false
	}
	return &o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *Range) HasInput() bool {
	if o != nil && o.Input != nil {
		return true
	}

	return false
}

// SetInput gets a reference to the given interface{} and assigns it to the Input field.
func (o *Range) SetInput(v interface{}) {
	o.Input = v
}

// GetStartByte returns the StartByte field value
func (o *Range) GetStartByte() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.StartByte
}

// GetStartByteOk returns a tuple with the StartByte field value
// and a boolean to check if the value has been set.
func (o *Range) GetStartByteOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StartByte, true
}

// SetStartByte sets field value
func (o *Range) SetStartByte(v int32) {
	o.StartByte = v
}

// GetType returns the Type field value
func (o *Range) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Range) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Range) SetType(v string) {
	o.Type = v
}

func (o Range) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["area"] = o.Area
	}
	if true {
		toSerialize["end_byte"] = o.EndByte
	}
	if o.Input != nil {
		toSerialize["input"] = o.Input
	}
	if true {
		toSerialize["start_byte"] = o.StartByte
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableRange struct {
	value *Range
	isSet bool
}

func (v NullableRange) Get() *Range {
	return v.value
}

func (v *NullableRange) Set(val *Range) {
	v.value = val
	v.isSet = true
}

func (v NullableRange) IsSet() bool {
	return v.isSet
}

func (v *NullableRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRange(val *Range) *NullableRange {
	return &NullableRange{value: val, isSet: true}
}

func (v NullableRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


