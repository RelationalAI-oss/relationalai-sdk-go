/*
 * RelationalAI SDK
 *
 * This is a Client SDK for RelationalAI
 *
 * API version: 1.1.3
 * Contact: support@relational.ai
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// Cons struct for Cons
type Cons struct {
	LinkedList
	Head SyntaxNode `json:"head"`
	Tail LinkedList `json:"tail"`
}

// NewCons instantiates a new Cons object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCons(head SyntaxNode, tail LinkedList, ) *Cons {
	this := Cons{}
	this.Head = head
	this.Tail = tail
	return &this
}

// NewConsWithDefaults instantiates a new Cons object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsWithDefaults() *Cons {
	this := Cons{}
	return &this
}

// GetHead returns the Head field value
func (o *Cons) GetHead() SyntaxNode {
	if o == nil  {
		var ret SyntaxNode
		return ret
	}

	return o.Head
}

// GetHeadOk returns a tuple with the Head field value
// and a boolean to check if the value has been set.
func (o *Cons) GetHeadOk() (*SyntaxNode, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Head, true
}

// SetHead sets field value
func (o *Cons) SetHead(v SyntaxNode) {
	o.Head = v
}

// GetTail returns the Tail field value
func (o *Cons) GetTail() LinkedList {
	if o == nil  {
		var ret LinkedList
		return ret
	}

	return o.Tail
}

// GetTailOk returns a tuple with the Tail field value
// and a boolean to check if the value has been set.
func (o *Cons) GetTailOk() (*LinkedList, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Tail, true
}

// SetTail sets field value
func (o *Cons) SetTail(v LinkedList) {
	o.Tail = v
}

func (o Cons) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedLinkedList, errLinkedList := json.Marshal(o.LinkedList)
	if errLinkedList != nil {
		return []byte{}, errLinkedList
	}
	errLinkedList = json.Unmarshal([]byte(serializedLinkedList), &toSerialize)
	if errLinkedList != nil {
		return []byte{}, errLinkedList
	}
	if true {
		toSerialize["head"] = o.Head
	}
	if true {
		toSerialize["tail"] = o.Tail
	}
	return json.Marshal(toSerialize)
}

type NullableCons struct {
	value *Cons
	isSet bool
}

func (v NullableCons) Get() *Cons {
	return v.value
}

func (v *NullableCons) Set(val *Cons) {
	v.value = val
	v.isSet = true
}

func (v NullableCons) IsSet() bool {
	return v.isSet
}

func (v *NullableCons) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCons(val *Cons) *NullableCons {
	return &NullableCons{value: val, isSet: true}
}

func (v NullableCons) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCons) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


