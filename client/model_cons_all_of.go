/*
 * RelationalAI SDK
 *
 * This is a Client SDK for RelationalAI
 *
 * API version: 1.2.0
 * Contact: support@relational.ai
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ConsAllOf struct for ConsAllOf
type ConsAllOf struct {
	Head SyntaxNode `json:"head"`
	Tail LinkedList `json:"tail"`
}

// NewConsAllOf instantiates a new ConsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsAllOf(head SyntaxNode, tail LinkedList, ) *ConsAllOf {
	this := ConsAllOf{}
	this.Head = head
	this.Tail = tail
	return &this
}

// NewConsAllOfWithDefaults instantiates a new ConsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsAllOfWithDefaults() *ConsAllOf {
	this := ConsAllOf{}
	return &this
}

// GetHead returns the Head field value
func (o *ConsAllOf) GetHead() SyntaxNode {
	if o == nil  {
		var ret SyntaxNode
		return ret
	}

	return o.Head
}

// GetHeadOk returns a tuple with the Head field value
// and a boolean to check if the value has been set.
func (o *ConsAllOf) GetHeadOk() (*SyntaxNode, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Head, true
}

// SetHead sets field value
func (o *ConsAllOf) SetHead(v SyntaxNode) {
	o.Head = v
}

// GetTail returns the Tail field value
func (o *ConsAllOf) GetTail() LinkedList {
	if o == nil  {
		var ret LinkedList
		return ret
	}

	return o.Tail
}

// GetTailOk returns a tuple with the Tail field value
// and a boolean to check if the value has been set.
func (o *ConsAllOf) GetTailOk() (*LinkedList, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Tail, true
}

// SetTail sets field value
func (o *ConsAllOf) SetTail(v LinkedList) {
	o.Tail = v
}

func (o ConsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["head"] = o.Head
	}
	if true {
		toSerialize["tail"] = o.Tail
	}
	return json.Marshal(toSerialize)
}

type NullableConsAllOf struct {
	value *ConsAllOf
	isSet bool
}

func (v NullableConsAllOf) Get() *ConsAllOf {
	return v.value
}

func (v *NullableConsAllOf) Set(val *ConsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableConsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableConsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsAllOf(val *ConsAllOf) *NullableConsAllOf {
	return &NullableConsAllOf{value: val, isSet: true}
}

func (v NullableConsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


