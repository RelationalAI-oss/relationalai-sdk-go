/*
 * Delve Client SDK
 *
 * This is a Client SDK for Delve API
 *
 * API version: 1.1.3
 * Contact: support@relational.ai
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ImportActionAllOf struct for ImportActionAllOf
type ImportActionAllOf struct {
	Inputs []Relation `json:"inputs,omitempty"`
}

// NewImportActionAllOf instantiates a new ImportActionAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportActionAllOf() *ImportActionAllOf {
	this := ImportActionAllOf{}
	return &this
}

// NewImportActionAllOfWithDefaults instantiates a new ImportActionAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportActionAllOfWithDefaults() *ImportActionAllOf {
	this := ImportActionAllOf{}
	return &this
}

// GetInputs returns the Inputs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ImportActionAllOf) GetInputs() []Relation {
	if o == nil  {
		var ret []Relation
		return ret
	}
	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImportActionAllOf) GetInputsOk() (*[]Relation, bool) {
	if o == nil || o.Inputs == nil {
		return nil, false
	}
	return &o.Inputs, true
}

// HasInputs returns a boolean if a field has been set.
func (o *ImportActionAllOf) HasInputs() bool {
	if o != nil && o.Inputs != nil {
		return true
	}

	return false
}

// SetInputs gets a reference to the given []Relation and assigns it to the Inputs field.
func (o *ImportActionAllOf) SetInputs(v []Relation) {
	o.Inputs = v
}

func (o ImportActionAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Inputs != nil {
		toSerialize["inputs"] = o.Inputs
	}
	return json.Marshal(toSerialize)
}

type NullableImportActionAllOf struct {
	value *ImportActionAllOf
	isSet bool
}

func (v NullableImportActionAllOf) Get() *ImportActionAllOf {
	return v.value
}

func (v *NullableImportActionAllOf) Set(val *ImportActionAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableImportActionAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableImportActionAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportActionAllOf(val *ImportActionAllOf) *NullableImportActionAllOf {
	return &NullableImportActionAllOf{value: val, isSet: true}
}

func (v NullableImportActionAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportActionAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


