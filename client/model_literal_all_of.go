/*
 * RelationalAI SDK
 *
 * This is a Client SDK for RelationalAI
 *
 * API version: 1.2.0
 * Contact: support@relational.ai
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// LiteralAllOf struct for LiteralAllOf
type LiteralAllOf struct {
	Missing bool `json:"missing"`
	Range Range `json:"range"`
	Value string `json:"value"`
}

// NewLiteralAllOf instantiates a new LiteralAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLiteralAllOf(missing bool, range_ Range, value string, ) *LiteralAllOf {
	this := LiteralAllOf{}
	this.Missing = missing
	this.Range = range_
	this.Value = value
	return &this
}

// NewLiteralAllOfWithDefaults instantiates a new LiteralAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLiteralAllOfWithDefaults() *LiteralAllOf {
	this := LiteralAllOf{}
	var missing bool = false
	this.Missing = missing
	var value string = ""
	this.Value = value
	return &this
}

// GetMissing returns the Missing field value
func (o *LiteralAllOf) GetMissing() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Missing
}

// GetMissingOk returns a tuple with the Missing field value
// and a boolean to check if the value has been set.
func (o *LiteralAllOf) GetMissingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Missing, true
}

// SetMissing sets field value
func (o *LiteralAllOf) SetMissing(v bool) {
	o.Missing = v
}

// GetRange returns the Range field value
func (o *LiteralAllOf) GetRange() Range {
	if o == nil  {
		var ret Range
		return ret
	}

	return o.Range
}

// GetRangeOk returns a tuple with the Range field value
// and a boolean to check if the value has been set.
func (o *LiteralAllOf) GetRangeOk() (*Range, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Range, true
}

// SetRange sets field value
func (o *LiteralAllOf) SetRange(v Range) {
	o.Range = v
}

// GetValue returns the Value field value
func (o *LiteralAllOf) GetValue() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *LiteralAllOf) GetValueOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *LiteralAllOf) SetValue(v string) {
	o.Value = v
}

func (o LiteralAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["missing"] = o.Missing
	}
	if true {
		toSerialize["range"] = o.Range
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableLiteralAllOf struct {
	value *LiteralAllOf
	isSet bool
}

func (v NullableLiteralAllOf) Get() *LiteralAllOf {
	return v.value
}

func (v *NullableLiteralAllOf) Set(val *LiteralAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableLiteralAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableLiteralAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLiteralAllOf(val *LiteralAllOf) *NullableLiteralAllOf {
	return &NullableLiteralAllOf{value: val, isSet: true}
}

func (v NullableLiteralAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLiteralAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


