/*
 * RelationalAI SDK
 *
 * This is a Client SDK for RelationalAI
 *
 * API version: 1.1.3
 * Contact: support@relational.ai
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InfraError struct for InfraError
type InfraError struct {
	Status string `json:"status"`
	Message string `json:"message"`
}

// NewInfraError instantiates a new InfraError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfraError(status string, message string, ) *InfraError {
	this := InfraError{}
	this.Status = status
	this.Message = message
	return &this
}

// NewInfraErrorWithDefaults instantiates a new InfraError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfraErrorWithDefaults() *InfraError {
	this := InfraError{}
	return &this
}

// GetStatus returns the Status field value
func (o *InfraError) GetStatus() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *InfraError) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *InfraError) SetStatus(v string) {
	o.Status = v
}

// GetMessage returns the Message field value
func (o *InfraError) GetMessage() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *InfraError) GetMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *InfraError) SetMessage(v string) {
	o.Message = v
}

func (o InfraError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableInfraError struct {
	value *InfraError
	isSet bool
}

func (v NullableInfraError) Get() *InfraError {
	return v.value
}

func (v *NullableInfraError) Set(val *InfraError) {
	v.value = val
	v.isSet = true
}

func (v NullableInfraError) IsSet() bool {
	return v.isSet
}

func (v *NullableInfraError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfraError(val *InfraError) *NullableInfraError {
	return &NullableInfraError{value: val, isSet: true}
}

func (v NullableInfraError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfraError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


