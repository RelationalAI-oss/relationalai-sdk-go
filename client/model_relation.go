/*
 * RelationalAI SDK
 *
 * This is a Client SDK for RelationalAI
 *
 * API version: 1.1.3
 * Contact: support@relational.ai
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// Relation struct for Relation
type Relation struct {
	Columns [][]interface{} `json:"columns,omitempty"`
	RelKey RelKey `json:"rel_key"`
	Type string `json:"type"`
}

// NewRelation instantiates a new Relation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelation(relKey RelKey, type_ string, ) *Relation {
	this := Relation{}
	this.RelKey = relKey
	this.Type = type_
	return &this
}

// NewRelationWithDefaults instantiates a new Relation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationWithDefaults() *Relation {
	this := Relation{}
	var type_ string = "Relation"
	this.Type = type_
	return &this
}

// GetColumns returns the Columns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Relation) GetColumns() [][]interface{} {
	if o == nil  {
		var ret [][]interface{}
		return ret
	}
	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Relation) GetColumnsOk() (*[][]interface{}, bool) {
	if o == nil || o.Columns == nil {
		return nil, false
	}
	return &o.Columns, true
}

// HasColumns returns a boolean if a field has been set.
func (o *Relation) HasColumns() bool {
	if o != nil && o.Columns != nil {
		return true
	}

	return false
}

// SetColumns gets a reference to the given [][]interface{} and assigns it to the Columns field.
func (o *Relation) SetColumns(v [][]interface{}) {
	o.Columns = v
}

// GetRelKey returns the RelKey field value
func (o *Relation) GetRelKey() RelKey {
	if o == nil  {
		var ret RelKey
		return ret
	}

	return o.RelKey
}

// GetRelKeyOk returns a tuple with the RelKey field value
// and a boolean to check if the value has been set.
func (o *Relation) GetRelKeyOk() (*RelKey, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RelKey, true
}

// SetRelKey sets field value
func (o *Relation) SetRelKey(v RelKey) {
	o.RelKey = v
}

// GetType returns the Type field value
func (o *Relation) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Relation) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Relation) SetType(v string) {
	o.Type = v
}

func (o Relation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Columns != nil {
		toSerialize["columns"] = o.Columns
	}
	if true {
		toSerialize["rel_key"] = o.RelKey
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableRelation struct {
	value *Relation
	isSet bool
}

func (v NullableRelation) Get() *Relation {
	return v.value
}

func (v *NullableRelation) Set(val *Relation) {
	v.value = val
	v.isSet = true
}

func (v NullableRelation) IsSet() bool {
	return v.isSet
}

func (v *NullableRelation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelation(val *Relation) *NullableRelation {
	return &NullableRelation{value: val, isSet: true}
}

func (v NullableRelation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


