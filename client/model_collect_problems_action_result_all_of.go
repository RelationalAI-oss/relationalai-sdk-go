/*
 * RelationalAI SDK
 *
 * This is a Client SDK for RelationalAI
 *
 * API version: 1.1.3
 * Contact: support@relational.ai
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// CollectProblemsActionResultAllOf struct for CollectProblemsActionResultAllOf
type CollectProblemsActionResultAllOf struct {
	Problems []AbstractProblem `json:"problems,omitempty"`
}

// NewCollectProblemsActionResultAllOf instantiates a new CollectProblemsActionResultAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCollectProblemsActionResultAllOf() *CollectProblemsActionResultAllOf {
	this := CollectProblemsActionResultAllOf{}
	return &this
}

// NewCollectProblemsActionResultAllOfWithDefaults instantiates a new CollectProblemsActionResultAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCollectProblemsActionResultAllOfWithDefaults() *CollectProblemsActionResultAllOf {
	this := CollectProblemsActionResultAllOf{}
	return &this
}

// GetProblems returns the Problems field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CollectProblemsActionResultAllOf) GetProblems() []AbstractProblem {
	if o == nil  {
		var ret []AbstractProblem
		return ret
	}
	return o.Problems
}

// GetProblemsOk returns a tuple with the Problems field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CollectProblemsActionResultAllOf) GetProblemsOk() (*[]AbstractProblem, bool) {
	if o == nil || o.Problems == nil {
		return nil, false
	}
	return &o.Problems, true
}

// HasProblems returns a boolean if a field has been set.
func (o *CollectProblemsActionResultAllOf) HasProblems() bool {
	if o != nil && o.Problems != nil {
		return true
	}

	return false
}

// SetProblems gets a reference to the given []AbstractProblem and assigns it to the Problems field.
func (o *CollectProblemsActionResultAllOf) SetProblems(v []AbstractProblem) {
	o.Problems = v
}

func (o CollectProblemsActionResultAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Problems != nil {
		toSerialize["problems"] = o.Problems
	}
	return json.Marshal(toSerialize)
}

type NullableCollectProblemsActionResultAllOf struct {
	value *CollectProblemsActionResultAllOf
	isSet bool
}

func (v NullableCollectProblemsActionResultAllOf) Get() *CollectProblemsActionResultAllOf {
	return v.value
}

func (v *NullableCollectProblemsActionResultAllOf) Set(val *CollectProblemsActionResultAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCollectProblemsActionResultAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCollectProblemsActionResultAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollectProblemsActionResultAllOf(val *CollectProblemsActionResultAllOf) *NullableCollectProblemsActionResultAllOf {
	return &NullableCollectProblemsActionResultAllOf{value: val, isSet: true}
}

func (v NullableCollectProblemsActionResultAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollectProblemsActionResultAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


