/*
 * RelationalAI SDK
 *
 * This is a Client SDK for RelationalAI
 *
 * API version: 1.1.3
 * Contact: support@relational.ai
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// StorageProblem struct for StorageProblem
type StorageProblem struct {
	AbstractProblem
	Exception string `json:"exception"`
}

// NewStorageProblem instantiates a new StorageProblem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageProblem(exception string, ) *StorageProblem {
	this := StorageProblem{}
	this.Exception = exception
	return &this
}

// NewStorageProblemWithDefaults instantiates a new StorageProblem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageProblemWithDefaults() *StorageProblem {
	this := StorageProblem{}
	var exception string = ""
	this.Exception = exception
	return &this
}

// GetException returns the Exception field value
func (o *StorageProblem) GetException() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Exception
}

// GetExceptionOk returns a tuple with the Exception field value
// and a boolean to check if the value has been set.
func (o *StorageProblem) GetExceptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Exception, true
}

// SetException sets field value
func (o *StorageProblem) SetException(v string) {
	o.Exception = v
}

func (o StorageProblem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedAbstractProblem, errAbstractProblem := json.Marshal(o.AbstractProblem)
	if errAbstractProblem != nil {
		return []byte{}, errAbstractProblem
	}
	errAbstractProblem = json.Unmarshal([]byte(serializedAbstractProblem), &toSerialize)
	if errAbstractProblem != nil {
		return []byte{}, errAbstractProblem
	}
	if true {
		toSerialize["exception"] = o.Exception
	}
	return json.Marshal(toSerialize)
}

type NullableStorageProblem struct {
	value *StorageProblem
	isSet bool
}

func (v NullableStorageProblem) Get() *StorageProblem {
	return v.value
}

func (v *NullableStorageProblem) Set(val *StorageProblem) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageProblem) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageProblem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageProblem(val *StorageProblem) *NullableStorageProblem {
	return &NullableStorageProblem{value: val, isSet: true}
}

func (v NullableStorageProblem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageProblem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


