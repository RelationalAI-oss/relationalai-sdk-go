/*
 * Delve Client SDK
 *
 * This is a Client SDK for Delve API
 *
 * API version: 1.1.3
 * Contact: support@relational.ai
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ParseAction struct for ParseAction
type ParseAction struct {
	Action
	Nonterm string `json:"nonterm"`
	Source Source `json:"source"`
}

// NewParseAction instantiates a new ParseAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParseAction(nonterm string, source Source, ) *ParseAction {
	this := ParseAction{}
	this.Nonterm = nonterm
	this.Source = source
	return &this
}

// NewParseActionWithDefaults instantiates a new ParseAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParseActionWithDefaults() *ParseAction {
	this := ParseAction{}
	var nonterm string = ""
	this.Nonterm = nonterm
	return &this
}

// GetNonterm returns the Nonterm field value
func (o *ParseAction) GetNonterm() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Nonterm
}

// GetNontermOk returns a tuple with the Nonterm field value
// and a boolean to check if the value has been set.
func (o *ParseAction) GetNontermOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Nonterm, true
}

// SetNonterm sets field value
func (o *ParseAction) SetNonterm(v string) {
	o.Nonterm = v
}

// GetSource returns the Source field value
func (o *ParseAction) GetSource() Source {
	if o == nil  {
		var ret Source
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *ParseAction) GetSourceOk() (*Source, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *ParseAction) SetSource(v Source) {
	o.Source = v
}

func (o ParseAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedAction, errAction := json.Marshal(o.Action)
	if errAction != nil {
		return []byte{}, errAction
	}
	errAction = json.Unmarshal([]byte(serializedAction), &toSerialize)
	if errAction != nil {
		return []byte{}, errAction
	}
	if true {
		toSerialize["nonterm"] = o.Nonterm
	}
	if true {
		toSerialize["source"] = o.Source
	}
	return json.Marshal(toSerialize)
}

type NullableParseAction struct {
	value *ParseAction
	isSet bool
}

func (v NullableParseAction) Get() *ParseAction {
	return v.value
}

func (v *NullableParseAction) Set(val *ParseAction) {
	v.value = val
	v.isSet = true
}

func (v NullableParseAction) IsSet() bool {
	return v.isSet
}

func (v *NullableParseAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParseAction(val *ParseAction) *NullableParseAction {
	return &NullableParseAction{value: val, isSet: true}
}

func (v NullableParseAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParseAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


