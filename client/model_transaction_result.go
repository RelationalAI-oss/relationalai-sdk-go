/*
 * RelationalAI SDK
 *
 * This is a Client SDK for RelationalAI
 *
 * API version: 1.2.0
 * Contact: support@relational.ai
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// TransactionResult struct for TransactionResult
type TransactionResult struct {
	Aborted    bool                  `json:"aborted"`
	Actions    []LabeledActionResult `json:"actions,omitempty"`
	DebugLevel NullableInt32         `json:"debug_level,omitempty"`
	Output     []Relation            `json:"output,omitempty"`
	Problems   []interface{}         `json:"problems,omitempty"`
	Version    NullableInt32         `json:"version,omitempty"`
	Type       string                `json:"type"`
}

// NewTransactionResult instantiates a new TransactionResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionResult(aborted bool, type_ string) *TransactionResult {
	this := TransactionResult{}
	this.Aborted = aborted
	this.Type = type_
	return &this
}

// NewTransactionResultWithDefaults instantiates a new TransactionResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionResultWithDefaults() *TransactionResult {
	this := TransactionResult{}
	var aborted bool = false
	this.Aborted = aborted
	var type_ string = "TransactionResult"
	this.Type = type_
	return &this
}

// GetAborted returns the Aborted field value
func (o *TransactionResult) GetAborted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Aborted
}

// GetAbortedOk returns a tuple with the Aborted field value
// and a boolean to check if the value has been set.
func (o *TransactionResult) GetAbortedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Aborted, true
}

// SetAborted sets field value
func (o *TransactionResult) SetAborted(v bool) {
	o.Aborted = v
}

// GetActions returns the Actions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionResult) GetActions() []LabeledActionResult {
	if o == nil {
		var ret []LabeledActionResult
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionResult) GetActionsOk() (*[]LabeledActionResult, bool) {
	if o == nil || o.Actions == nil {
		return nil, false
	}
	return &o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *TransactionResult) HasActions() bool {
	if o != nil && o.Actions != nil {
		return true
	}

	return false
}

// SetActions gets a reference to the given []LabeledActionResult and assigns it to the Actions field.
func (o *TransactionResult) SetActions(v []LabeledActionResult) {
	o.Actions = v
}

// GetDebugLevel returns the DebugLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionResult) GetDebugLevel() int32 {
	if o == nil || o.DebugLevel.Get() == nil {
		var ret int32
		return ret
	}
	return *o.DebugLevel.Get()
}

// GetDebugLevelOk returns a tuple with the DebugLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionResult) GetDebugLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DebugLevel.Get(), o.DebugLevel.IsSet()
}

// HasDebugLevel returns a boolean if a field has been set.
func (o *TransactionResult) HasDebugLevel() bool {
	if o != nil && o.DebugLevel.IsSet() {
		return true
	}

	return false
}

// SetDebugLevel gets a reference to the given NullableInt32 and assigns it to the DebugLevel field.
func (o *TransactionResult) SetDebugLevel(v int32) {
	o.DebugLevel.Set(&v)
}

// SetDebugLevelNil sets the value for DebugLevel to be an explicit nil
func (o *TransactionResult) SetDebugLevelNil() {
	o.DebugLevel.Set(nil)
}

// UnsetDebugLevel ensures that no value is present for DebugLevel, not even an explicit nil
func (o *TransactionResult) UnsetDebugLevel() {
	o.DebugLevel.Unset()
}

// GetOutput returns the Output field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionResult) GetOutput() []Relation {
	if o == nil {
		var ret []Relation
		return ret
	}
	return o.Output
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionResult) GetOutputOk() (*[]Relation, bool) {
	if o == nil || o.Output == nil {
		return nil, false
	}
	return &o.Output, true
}

// HasOutput returns a boolean if a field has been set.
func (o *TransactionResult) HasOutput() bool {
	if o != nil && o.Output != nil {
		return true
	}

	return false
}

// SetOutput gets a reference to the given []Relation and assigns it to the Output field.
func (o *TransactionResult) SetOutput(v []Relation) {
	o.Output = v
}

// GetProblems returns the Problems field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionResult) GetProblems() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}
	return o.Problems
}

// GetProblemsOk returns a tuple with the Problems field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionResult) GetProblemsOk() (*[]interface{}, bool) {
	if o == nil || o.Problems == nil {
		return nil, false
	}
	return &o.Problems, true
}

// HasProblems returns a boolean if a field has been set.
func (o *TransactionResult) HasProblems() bool {
	if o != nil && o.Problems != nil {
		return true
	}

	return false
}

// SetProblems gets a reference to the given []AbstractProblem and assigns it to the Problems field.
func (o *TransactionResult) SetProblems(v []interface{}) {
	o.Problems = v
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionResult) GetVersion() int32 {
	if o == nil || o.Version.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionResult) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *TransactionResult) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableInt32 and assigns it to the Version field.
func (o *TransactionResult) SetVersion(v int32) {
	o.Version.Set(&v)
}

// SetVersionNil sets the value for Version to be an explicit nil
func (o *TransactionResult) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *TransactionResult) UnsetVersion() {
	o.Version.Unset()
}

// GetType returns the Type field value
func (o *TransactionResult) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TransactionResult) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TransactionResult) SetType(v string) {
	o.Type = v
}

func (o TransactionResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["aborted"] = o.Aborted
	}
	if o.Actions != nil {
		toSerialize["actions"] = o.Actions
	}
	if o.DebugLevel.IsSet() {
		toSerialize["debug_level"] = o.DebugLevel.Get()
	}
	if o.Output != nil {
		toSerialize["output"] = o.Output
	}
	if o.Problems != nil {
		toSerialize["problems"] = o.Problems
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionResult struct {
	value *TransactionResult
	isSet bool
}

func (v NullableTransactionResult) Get() *TransactionResult {
	return v.value
}

func (v *NullableTransactionResult) Set(val *TransactionResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionResult(val *TransactionResult) *NullableTransactionResult {
	return &NullableTransactionResult{value: val, isSet: true}
}

func (v NullableTransactionResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
