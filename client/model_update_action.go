/*
 * RelationalAI SDK
 *
 * This is a Client SDK for RelationalAI
 *
 * API version: 1.2.0
 * Contact: support@relational.ai
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// UpdateAction struct for UpdateAction
type UpdateAction struct {
	Action
	Delta []PairAnyValueAnyValue `json:"delta,omitempty"`
	Rel RelKey `json:"rel"`
	Updates []PairAnyValueAnyValue `json:"updates,omitempty"`
}

// NewUpdateAction instantiates a new UpdateAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAction(rel RelKey, ) *UpdateAction {
	this := UpdateAction{}
	this.Rel = rel
	return &this
}

// NewUpdateActionWithDefaults instantiates a new UpdateAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateActionWithDefaults() *UpdateAction {
	this := UpdateAction{}
	return &this
}

// GetDelta returns the Delta field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateAction) GetDelta() []PairAnyValueAnyValue {
	if o == nil  {
		var ret []PairAnyValueAnyValue
		return ret
	}
	return o.Delta
}

// GetDeltaOk returns a tuple with the Delta field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateAction) GetDeltaOk() (*[]PairAnyValueAnyValue, bool) {
	if o == nil || o.Delta == nil {
		return nil, false
	}
	return &o.Delta, true
}

// HasDelta returns a boolean if a field has been set.
func (o *UpdateAction) HasDelta() bool {
	if o != nil && o.Delta != nil {
		return true
	}

	return false
}

// SetDelta gets a reference to the given []PairAnyValueAnyValue and assigns it to the Delta field.
func (o *UpdateAction) SetDelta(v []PairAnyValueAnyValue) {
	o.Delta = v
}

// GetRel returns the Rel field value
func (o *UpdateAction) GetRel() RelKey {
	if o == nil  {
		var ret RelKey
		return ret
	}

	return o.Rel
}

// GetRelOk returns a tuple with the Rel field value
// and a boolean to check if the value has been set.
func (o *UpdateAction) GetRelOk() (*RelKey, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Rel, true
}

// SetRel sets field value
func (o *UpdateAction) SetRel(v RelKey) {
	o.Rel = v
}

// GetUpdates returns the Updates field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateAction) GetUpdates() []PairAnyValueAnyValue {
	if o == nil  {
		var ret []PairAnyValueAnyValue
		return ret
	}
	return o.Updates
}

// GetUpdatesOk returns a tuple with the Updates field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateAction) GetUpdatesOk() (*[]PairAnyValueAnyValue, bool) {
	if o == nil || o.Updates == nil {
		return nil, false
	}
	return &o.Updates, true
}

// HasUpdates returns a boolean if a field has been set.
func (o *UpdateAction) HasUpdates() bool {
	if o != nil && o.Updates != nil {
		return true
	}

	return false
}

// SetUpdates gets a reference to the given []PairAnyValueAnyValue and assigns it to the Updates field.
func (o *UpdateAction) SetUpdates(v []PairAnyValueAnyValue) {
	o.Updates = v
}

func (o UpdateAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedAction, errAction := json.Marshal(o.Action)
	if errAction != nil {
		return []byte{}, errAction
	}
	errAction = json.Unmarshal([]byte(serializedAction), &toSerialize)
	if errAction != nil {
		return []byte{}, errAction
	}
	if o.Delta != nil {
		toSerialize["delta"] = o.Delta
	}
	if true {
		toSerialize["rel"] = o.Rel
	}
	if o.Updates != nil {
		toSerialize["updates"] = o.Updates
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateAction struct {
	value *UpdateAction
	isSet bool
}

func (v NullableUpdateAction) Get() *UpdateAction {
	return v.value
}

func (v *NullableUpdateAction) Set(val *UpdateAction) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAction) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAction(val *UpdateAction) *NullableUpdateAction {
	return &NullableUpdateAction{value: val, isSet: true}
}

func (v NullableUpdateAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


