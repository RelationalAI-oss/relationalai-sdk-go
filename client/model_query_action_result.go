/*
 * RelationalAI SDK
 *
 * This is a Client SDK for RelationalAI
 *
 * API version: 1.2.0
 * Contact: support@relational.ai
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// QueryActionResult struct for QueryActionResult
type QueryActionResult struct {
	ActionResult
	Output []Relation `json:"output,omitempty"`
}

// NewQueryActionResult instantiates a new QueryActionResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryActionResult() *QueryActionResult {
	this := QueryActionResult{}
	return &this
}

// NewQueryActionResultWithDefaults instantiates a new QueryActionResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryActionResultWithDefaults() *QueryActionResult {
	this := QueryActionResult{}
	return &this
}

// GetOutput returns the Output field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryActionResult) GetOutput() []Relation {
	if o == nil  {
		var ret []Relation
		return ret
	}
	return o.Output
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryActionResult) GetOutputOk() (*[]Relation, bool) {
	if o == nil || o.Output == nil {
		return nil, false
	}
	return &o.Output, true
}

// HasOutput returns a boolean if a field has been set.
func (o *QueryActionResult) HasOutput() bool {
	if o != nil && o.Output != nil {
		return true
	}

	return false
}

// SetOutput gets a reference to the given []Relation and assigns it to the Output field.
func (o *QueryActionResult) SetOutput(v []Relation) {
	o.Output = v
}

func (o QueryActionResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedActionResult, errActionResult := json.Marshal(o.ActionResult)
	if errActionResult != nil {
		return []byte{}, errActionResult
	}
	errActionResult = json.Unmarshal([]byte(serializedActionResult), &toSerialize)
	if errActionResult != nil {
		return []byte{}, errActionResult
	}
	if o.Output != nil {
		toSerialize["output"] = o.Output
	}
	return json.Marshal(toSerialize)
}

type NullableQueryActionResult struct {
	value *QueryActionResult
	isSet bool
}

func (v NullableQueryActionResult) Get() *QueryActionResult {
	return v.value
}

func (v *NullableQueryActionResult) Set(val *QueryActionResult) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryActionResult) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryActionResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryActionResult(val *QueryActionResult) *NullableQueryActionResult {
	return &NullableQueryActionResult{value: val, isSet: true}
}

func (v NullableQueryActionResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryActionResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


