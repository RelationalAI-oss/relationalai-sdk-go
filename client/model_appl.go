/*
 * RelationalAI SDK
 *
 * This is a Client SDK for RelationalAI
 *
 * API version: 1.1.3
 * Contact: support@relational.ai
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// Appl struct for Appl
type Appl struct {
	SyntaxNode
	Arguments []SyntaxNode `json:"arguments,omitempty"`
	Error bool `json:"error"`
	Missing bool `json:"missing"`
	Range Range `json:"range"`
	Symbol string `json:"symbol"`
}

// NewAppl instantiates a new Appl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppl(error_ bool, missing bool, range_ Range, symbol string, ) *Appl {
	this := Appl{}
	this.Error = error_
	this.Missing = missing
	this.Range = range_
	this.Symbol = symbol
	return &this
}

// NewApplWithDefaults instantiates a new Appl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplWithDefaults() *Appl {
	this := Appl{}
	var error_ bool = false
	this.Error = error_
	var missing bool = false
	this.Missing = missing
	var symbol string = ""
	this.Symbol = symbol
	return &this
}

// GetArguments returns the Arguments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Appl) GetArguments() []SyntaxNode {
	if o == nil  {
		var ret []SyntaxNode
		return ret
	}
	return o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Appl) GetArgumentsOk() (*[]SyntaxNode, bool) {
	if o == nil || o.Arguments == nil {
		return nil, false
	}
	return &o.Arguments, true
}

// HasArguments returns a boolean if a field has been set.
func (o *Appl) HasArguments() bool {
	if o != nil && o.Arguments != nil {
		return true
	}

	return false
}

// SetArguments gets a reference to the given []SyntaxNode and assigns it to the Arguments field.
func (o *Appl) SetArguments(v []SyntaxNode) {
	o.Arguments = v
}

// GetError returns the Error field value
func (o *Appl) GetError() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *Appl) GetErrorOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *Appl) SetError(v bool) {
	o.Error = v
}

// GetMissing returns the Missing field value
func (o *Appl) GetMissing() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Missing
}

// GetMissingOk returns a tuple with the Missing field value
// and a boolean to check if the value has been set.
func (o *Appl) GetMissingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Missing, true
}

// SetMissing sets field value
func (o *Appl) SetMissing(v bool) {
	o.Missing = v
}

// GetRange returns the Range field value
func (o *Appl) GetRange() Range {
	if o == nil  {
		var ret Range
		return ret
	}

	return o.Range
}

// GetRangeOk returns a tuple with the Range field value
// and a boolean to check if the value has been set.
func (o *Appl) GetRangeOk() (*Range, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Range, true
}

// SetRange sets field value
func (o *Appl) SetRange(v Range) {
	o.Range = v
}

// GetSymbol returns the Symbol field value
func (o *Appl) GetSymbol() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *Appl) GetSymbolOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *Appl) SetSymbol(v string) {
	o.Symbol = v
}

func (o Appl) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedSyntaxNode, errSyntaxNode := json.Marshal(o.SyntaxNode)
	if errSyntaxNode != nil {
		return []byte{}, errSyntaxNode
	}
	errSyntaxNode = json.Unmarshal([]byte(serializedSyntaxNode), &toSerialize)
	if errSyntaxNode != nil {
		return []byte{}, errSyntaxNode
	}
	if o.Arguments != nil {
		toSerialize["arguments"] = o.Arguments
	}
	if true {
		toSerialize["error"] = o.Error
	}
	if true {
		toSerialize["missing"] = o.Missing
	}
	if true {
		toSerialize["range"] = o.Range
	}
	if true {
		toSerialize["symbol"] = o.Symbol
	}
	return json.Marshal(toSerialize)
}

type NullableAppl struct {
	value *Appl
	isSet bool
}

func (v NullableAppl) Get() *Appl {
	return v.value
}

func (v *NullableAppl) Set(val *Appl) {
	v.value = val
	v.isSet = true
}

func (v NullableAppl) IsSet() bool {
	return v.isSet
}

func (v *NullableAppl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppl(val *Appl) *NullableAppl {
	return &NullableAppl{value: val, isSet: true}
}

func (v NullableAppl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


