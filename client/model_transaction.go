/*
 * RelationalAI SDK
 *
 * This is a Client SDK for RelationalAI
 *
 * API version: 1.2.0
 * Contact: support@relational.ai
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// Transaction struct for Transaction
type Transaction struct {
	Abort bool `json:"abort"`
	Actions []LabeledAction `json:"actions,omitempty"`
	Dbname string `json:"dbname"`
	DebugLevel NullableInt32 `json:"debug_level,omitempty"`
	Mode string `json:"mode"`
	NowaitDurable bool `json:"nowait_durable"`
	Readonly bool `json:"readonly"`
	SourceDbname NullableString `json:"source_dbname,omitempty"`
	Version NullableInt32 `json:"version,omitempty"`
	Type string `json:"type"`
}

// NewTransaction instantiates a new Transaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransaction(abort bool, dbname string, mode string, nowaitDurable bool, readonly bool, type_ string, ) *Transaction {
	this := Transaction{}
	this.Abort = abort
	this.Dbname = dbname
	this.Mode = mode
	this.NowaitDurable = nowaitDurable
	this.Readonly = readonly
	this.Type = type_
	return &this
}

// NewTransactionWithDefaults instantiates a new Transaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionWithDefaults() *Transaction {
	this := Transaction{}
	var abort bool = false
	this.Abort = abort
	var dbname string = ""
	this.Dbname = dbname
	var mode string = "OPEN"
	this.Mode = mode
	var nowaitDurable bool = false
	this.NowaitDurable = nowaitDurable
	var readonly bool = false
	this.Readonly = readonly
	var type_ string = "Transaction"
	this.Type = type_
	return &this
}

// GetAbort returns the Abort field value
func (o *Transaction) GetAbort() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Abort
}

// GetAbortOk returns a tuple with the Abort field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetAbortOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Abort, true
}

// SetAbort sets field value
func (o *Transaction) SetAbort(v bool) {
	o.Abort = v
}

// GetActions returns the Actions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Transaction) GetActions() []LabeledAction {
	if o == nil  {
		var ret []LabeledAction
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Transaction) GetActionsOk() (*[]LabeledAction, bool) {
	if o == nil || o.Actions == nil {
		return nil, false
	}
	return &o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *Transaction) HasActions() bool {
	if o != nil && o.Actions != nil {
		return true
	}

	return false
}

// SetActions gets a reference to the given []LabeledAction and assigns it to the Actions field.
func (o *Transaction) SetActions(v []LabeledAction) {
	o.Actions = v
}

// GetDbname returns the Dbname field value
func (o *Transaction) GetDbname() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Dbname
}

// GetDbnameOk returns a tuple with the Dbname field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetDbnameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Dbname, true
}

// SetDbname sets field value
func (o *Transaction) SetDbname(v string) {
	o.Dbname = v
}

// GetDebugLevel returns the DebugLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Transaction) GetDebugLevel() int32 {
	if o == nil || o.DebugLevel.Get() == nil {
		var ret int32
		return ret
	}
	return *o.DebugLevel.Get()
}

// GetDebugLevelOk returns a tuple with the DebugLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Transaction) GetDebugLevelOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DebugLevel.Get(), o.DebugLevel.IsSet()
}

// HasDebugLevel returns a boolean if a field has been set.
func (o *Transaction) HasDebugLevel() bool {
	if o != nil && o.DebugLevel.IsSet() {
		return true
	}

	return false
}

// SetDebugLevel gets a reference to the given NullableInt32 and assigns it to the DebugLevel field.
func (o *Transaction) SetDebugLevel(v int32) {
	o.DebugLevel.Set(&v)
}
// SetDebugLevelNil sets the value for DebugLevel to be an explicit nil
func (o *Transaction) SetDebugLevelNil() {
	o.DebugLevel.Set(nil)
}

// UnsetDebugLevel ensures that no value is present for DebugLevel, not even an explicit nil
func (o *Transaction) UnsetDebugLevel() {
	o.DebugLevel.Unset()
}

// GetMode returns the Mode field value
func (o *Transaction) GetMode() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetModeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *Transaction) SetMode(v string) {
	o.Mode = v
}

// GetNowaitDurable returns the NowaitDurable field value
func (o *Transaction) GetNowaitDurable() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.NowaitDurable
}

// GetNowaitDurableOk returns a tuple with the NowaitDurable field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetNowaitDurableOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NowaitDurable, true
}

// SetNowaitDurable sets field value
func (o *Transaction) SetNowaitDurable(v bool) {
	o.NowaitDurable = v
}

// GetReadonly returns the Readonly field value
func (o *Transaction) GetReadonly() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Readonly
}

// GetReadonlyOk returns a tuple with the Readonly field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetReadonlyOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Readonly, true
}

// SetReadonly sets field value
func (o *Transaction) SetReadonly(v bool) {
	o.Readonly = v
}

// GetSourceDbname returns the SourceDbname field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Transaction) GetSourceDbname() string {
	if o == nil || o.SourceDbname.Get() == nil {
		var ret string
		return ret
	}
	return *o.SourceDbname.Get()
}

// GetSourceDbnameOk returns a tuple with the SourceDbname field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Transaction) GetSourceDbnameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceDbname.Get(), o.SourceDbname.IsSet()
}

// HasSourceDbname returns a boolean if a field has been set.
func (o *Transaction) HasSourceDbname() bool {
	if o != nil && o.SourceDbname.IsSet() {
		return true
	}

	return false
}

// SetSourceDbname gets a reference to the given NullableString and assigns it to the SourceDbname field.
func (o *Transaction) SetSourceDbname(v string) {
	o.SourceDbname.Set(&v)
}
// SetSourceDbnameNil sets the value for SourceDbname to be an explicit nil
func (o *Transaction) SetSourceDbnameNil() {
	o.SourceDbname.Set(nil)
}

// UnsetSourceDbname ensures that no value is present for SourceDbname, not even an explicit nil
func (o *Transaction) UnsetSourceDbname() {
	o.SourceDbname.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Transaction) GetVersion() int32 {
	if o == nil || o.Version.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Transaction) GetVersionOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *Transaction) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableInt32 and assigns it to the Version field.
func (o *Transaction) SetVersion(v int32) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *Transaction) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *Transaction) UnsetVersion() {
	o.Version.Unset()
}

// GetType returns the Type field value
func (o *Transaction) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Transaction) SetType(v string) {
	o.Type = v
}

func (o Transaction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["abort"] = o.Abort
	}
	if o.Actions != nil {
		toSerialize["actions"] = o.Actions
	}
	if true {
		toSerialize["dbname"] = o.Dbname
	}
	if o.DebugLevel.IsSet() {
		toSerialize["debug_level"] = o.DebugLevel.Get()
	}
	if true {
		toSerialize["mode"] = o.Mode
	}
	if true {
		toSerialize["nowait_durable"] = o.NowaitDurable
	}
	if true {
		toSerialize["readonly"] = o.Readonly
	}
	if o.SourceDbname.IsSet() {
		toSerialize["source_dbname"] = o.SourceDbname.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableTransaction struct {
	value *Transaction
	isSet bool
}

func (v NullableTransaction) Get() *Transaction {
	return v.value
}

func (v *NullableTransaction) Set(val *Transaction) {
	v.value = val
	v.isSet = true
}

func (v NullableTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransaction(val *Transaction) *NullableTransaction {
	return &NullableTransaction{value: val, isSet: true}
}

func (v NullableTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


