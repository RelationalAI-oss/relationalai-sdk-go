/*
 * RelationalAI SDK
 *
 * This is a Client SDK for RelationalAI
 *
 * API version: 1.2.0
 * Contact: support@relational.ai
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// CardinalityActionResultAllOf struct for CardinalityActionResultAllOf
type CardinalityActionResultAllOf struct {
	Result []Relation `json:"result,omitempty"`
}

// NewCardinalityActionResultAllOf instantiates a new CardinalityActionResultAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardinalityActionResultAllOf() *CardinalityActionResultAllOf {
	this := CardinalityActionResultAllOf{}
	return &this
}

// NewCardinalityActionResultAllOfWithDefaults instantiates a new CardinalityActionResultAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardinalityActionResultAllOfWithDefaults() *CardinalityActionResultAllOf {
	this := CardinalityActionResultAllOf{}
	return &this
}

// GetResult returns the Result field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CardinalityActionResultAllOf) GetResult() []Relation {
	if o == nil  {
		var ret []Relation
		return ret
	}
	return o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CardinalityActionResultAllOf) GetResultOk() (*[]Relation, bool) {
	if o == nil || o.Result == nil {
		return nil, false
	}
	return &o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *CardinalityActionResultAllOf) HasResult() bool {
	if o != nil && o.Result != nil {
		return true
	}

	return false
}

// SetResult gets a reference to the given []Relation and assigns it to the Result field.
func (o *CardinalityActionResultAllOf) SetResult(v []Relation) {
	o.Result = v
}

func (o CardinalityActionResultAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Result != nil {
		toSerialize["result"] = o.Result
	}
	return json.Marshal(toSerialize)
}

type NullableCardinalityActionResultAllOf struct {
	value *CardinalityActionResultAllOf
	isSet bool
}

func (v NullableCardinalityActionResultAllOf) Get() *CardinalityActionResultAllOf {
	return v.value
}

func (v *NullableCardinalityActionResultAllOf) Set(val *CardinalityActionResultAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCardinalityActionResultAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCardinalityActionResultAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardinalityActionResultAllOf(val *CardinalityActionResultAllOf) *NullableCardinalityActionResultAllOf {
	return &NullableCardinalityActionResultAllOf{value: val, isSet: true}
}

func (v NullableCardinalityActionResultAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardinalityActionResultAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


